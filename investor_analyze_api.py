# -*- coding: utf-8 -*-
import os, logging, smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
import openai

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

openai.api_key = os.getenv("OPENAI_API_KEY")

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def get_openai_response(prompt, temp=0.7):
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "⚠️ Could not generate response."

def send_email(body, email):
    msg = MIMEText(body, "html", "utf-8")
    msg["Subject"] = "📊 Strategic Investor Readiness Report"
    msg["From"] = SMTP_USERNAME
    msg["To"] = email

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email send error: {e}")

@app.route("/investor_analyze", methods=["POST"])
def analyze_investor():
    try:
        data = request.get_json(force=True)

        name = data.get("fullName")
        dob = data.get("dob")
        company = data.get("company")
        role = data.get("role")
        country = data.get("country")
        experience = data.get("experience")
        industry = data.get("industry")
        challenge = data.get("challenge")
        context = data.get("context")
        targetProfile = data.get("targetProfile")
        email = data.get("email")
        advisor = data.get("advisor")

        age = compute_age(dob)

        summary_prompt = (
            f"Write a 4-paragraph investor readiness analysis in third-person only. "
            f"Start with: 'Similar individuals — such as a {age}-year-old professional with {experience} years of experience "
            f"in the {industry} sector in {country} —'. Use structured sections: Market Positioning, Investor Appeal, "
            f"Strategic Execution, and Regional Benchmarking (SG, MY, TW). Include realistic percentages and avoid personal pronouns."
        )

        creative_prompt = (
            f"Generate 10 creative business growth tips for the {industry} sector with the challenge '{challenge}'. "
            f"Use emoji bullets and professional language. Context: {context}."
        )

        summary = get_openai_response(summary_prompt)
        creative = get_openai_response(creative_prompt, temp=0.85)

        html = "<div style='font-family:sans-serif; padding:20px;'>"
        html += "<h2 style='text-align:center;'>📊 Strategic Investor Readiness Report</h2>"
        html += f"<p><strong>👤 Given Legal Name:</strong> {name}<br>"
        html += f"<strong>🗓️ Date of Birth:</strong> {dob}<br>"
        html += f"<strong>🏢 Company Name:</strong> {company}<br>"
        html += f"<strong>🧑‍💼 Role or Title:</strong> {role}<br>"
        html += f"<strong>🌍 Country:</strong> {country}<br>"
        html += f"<strong>💼 Years of Experience:</strong> {experience}<br>"
        html += f"<strong>🏭 Industry:</strong> {industry}<br>"
        html += f"<strong>🎯 Main Challenge:</strong> {challenge}<br>"
        html += f"<strong>💬 Brief Context:</strong> {context}<br>"
        html += f"<strong>🤝 Desired Investor/Client Profile:</strong> {targetProfile}<br>"
        html += f"<strong>📩 Email:</strong> {email}<br>"
        html += f"<strong>👼 Referrer Name:</strong> {advisor}</p>"

        html += "<br><h3>🧠 Strategic Summary</h3>"
        for para in summary.split("\n"):
            if para.strip():
                html += f"<p>{para.strip()}</p>"

        html += "<br><h3>💡 Creative Growth Suggestions</h3>"
        for tip in creative.split("\n"):
            if tip.strip():
                html += f"<p>{tip.strip()}</p>"

        html += "<br><p style='color:gray;font-size:14px;'><strong>🛡️ Disclaimer:</strong> This insight is generated using AI-based pattern recognition from anonymized professionals in SG, MY, TW. Please validate business decisions independently.</p>"

        html += (
            "<div style='background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;'>"
            "<strong>The insights in this report are generated by KataChat’s AI systems analyzing:</strong><br>"
            "1. Anonymized peer profiles across Singapore, Malaysia, and Taiwan<br>"
            "2. Aggregated global business benchmarks<br>"
            "<em>All data is processed using PDPA-compliant methods with statistical thresholds (n > 1,000).</em>"
            "</div></div>"
        )

        send_email(html, email)

        return jsonify({
            "summary": summary,
            "creative": creative,
            "html_result": html
        })

    except Exception as e:
        logging.error(f"Processing error: {e}")
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
