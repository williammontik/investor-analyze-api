# -*- coding: utf-8 -*-
import os, logging, smtplib, traceback
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
import openai

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

openai.api_key = os.getenv("OPENAI_API_KEY")

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def get_openai_response(prompt, temp=0.7):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "‚ö†Ô∏è Unable to generate response."

def send_email(html_body, subject):
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email send error: {e}")

@app.route("/investor_analyze", methods=["POST"])
def investor_analyze():
    try:
        data = request.get_json(force=True)
        logging.debug(f"POST received: {data}")

        name = data.get("fullName")
        dob = data.get("dob")
        company = data.get("company")
        role = data.get("role")
        country = data.get("country")
        experience = data.get("experience")
        industry = data.get("industry")
        if industry == "Other":
            industry = data.get("otherIndustry", "Other")

        challenge = data.get("challenge")
        context = data.get("context")
        target = data.get("targetProfile")
        email = data.get("email")
        advisor = data.get("advisor")
        lang = data.get("lang", "en")

        age = compute_age(dob)
        subject = "Your Strategic Investor Insight"

        summary_prompt = (
            f"A {age}-year-old {role} from {company} in {country} with {experience} years of experience is in the "
            f"{industry} sector. Their challenge: {challenge}. Context: {context}. They wish to reach: {target}. "
            f"Write a compelling 4-paragraph investor-facing strategic summary using third-person only."
        )

        tips_prompt = (
            f"As an investor positioning coach, provide 10 creative, actionable tips with emojis for a {age}-year-old {role} "
            f"in the {industry} industry, tackling the challenge: '{challenge}' and aiming for: '{target}'. "
            f"Base your suggestions on real business strategy."
        )

        summary = get_openai_response(summary_prompt)
        tips = get_openai_response(tips_prompt, temp=0.9)

        html = f"<h4 style='text-align:center; font-size:24px;'>üéØ Strategic Investor Insight</h4>"
        html += f"<p><strong>Name:</strong> {name}<br><strong>DOB:</strong> {dob}<br><strong>Country:</strong> {country}<br>"
        html += f"<strong>Company:</strong> {company}<br><strong>Role:</strong> {role}<br><strong>Years of Experience:</strong> {experience}<br>"
        html += f"<strong>Industry:</strong> {industry}<br><strong>Challenge:</strong> {challenge}<br>"
        html += f"<strong>Context:</strong> {context}<br><strong>Target Profile:</strong> {target}<br>"
        html += f"<strong>Advisor:</strong> {advisor}</p>"

        html += "<br><div style='font-size:24px;font-weight:bold;'>üß† Strategic Summary:</div><br>"
        for para in summary.split("\n"):
            if para.strip():
                html += f"<p style='line-height:1.7; font-size:16px; margin-bottom:16px;'>{para.strip()}</p>"

        html += "<br><div style='font-size:24px;font-weight:bold;'>üí° Creative Tips:</div><br>"
        for tip in tips.split("\n"):
            if tip.strip():
                html += f"<p style='margin:16px 0; font-size:17px;'>{tip.strip()}</p>"

        html += (
            "<br><p style='font-size:16px;'><strong>üõ°Ô∏è Disclaimer:</strong></p>"
            "<p style='font-size:15px; line-height:1.6;'>This report is generated by KataChat‚Äôs AI for reflection and insight. "
            "For any major decisions, consult qualified professionals.</p>"
        )

        html += (
            "<div style='background-color:#f0f8ff; color:#003366; padding:15px; border-left:4px solid #003366; margin-top:30px;'>"
            "<strong>Insights powered by:</strong><br>"
            "üîπ Anonymized professional trends in Singapore, Malaysia, Taiwan<br>"
            "üîπ Premium clientele benchmarks from OpenAI global databases<br>"
            "<em>Fully PDPA-compliant. No personal data is stored or reused.</em></div>"
        )

        send_email(html, subject)

        return jsonify({
            "summary": summary,
            "tips": tips,
            "html_result": html
        })

    except Exception as e:
        logging.error(f"Investor analyze error: {e}")
        traceback.print_exc()
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
